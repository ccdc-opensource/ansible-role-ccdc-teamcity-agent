---
# Please make sure all variables used in this role are prefixed with teamcity_single_agent

# Setup variables for single agent

- name: read agent hostname
  set_fact: teamcity_single_agent_hostname="{{ inventory_hostname }}"

- name: read agent name
  set_fact: teamcity_single_agent_name="{{ teamcity_single_agent_hostname }}-{{ agent_number_formatted }}"

- name: calculate installation directory for agent
  set_fact: teamcity_single_agent_install_dir="{{ teamcity_agent_install_dir }}/{{ teamcity_single_agent_name }}"

- name: calculate macos launchd label for agent
  set_fact: teamcity_single_agent_launchd_label="jetbrains.teamcity.BuildAgent.{{ teamcity_single_agent_name }}"

- name: calculate macos launchd unit file
  set_fact: teamcity_single_agent_launchd_filename="/Users/{{ teamcity_build_username }}/Library/LaunchAgents/{{ teamcity_single_agent_launchd_label }}.plist"

# Create directories

- name: "Ensure install directory for {{ teamcity_single_agent_name }} exists (Windows)"
  win_file:
    path: "{{ teamcity_single_agent_install_dir }}"
    state: directory
  when: ansible_os_family == "Windows"

- name: "Ensure install directory for {{ teamcity_single_agent_name }} exists (Not windows)"
  file:
    path: "{{ teamcity_single_agent_install_dir }}"
    state: directory
    mode: 0775
    recurse: true
  when: ansible_os_family != "Windows"

# Check if the configuration is there. If so avoid unzipping the buildagent.zip file
# Also read the agent token as it must be kept between runs
- name: "Agent {{ teamcity_single_agent_name }} -- Check for existing configuration (Windows)"
  win_stat:
    path: "{{ teamcity_single_agent_install_dir }}/conf/buildAgent.properties"
  register: teamcity_single_agent_current_config_file_windows
  when: ansible_os_family == "Windows"

- name: "Agent {{ teamcity_single_agent_name }} -- Check for existing configuration (Non Windows)"
  stat:
    path: "{{ teamcity_single_agent_install_dir }}/conf/buildAgent.properties"
  register: teamcity_single_agent_current_config_file_non_windows
  when: ansible_os_family != "Windows"

- name: "Agent {{ teamcity_single_agent_name }} -- Read existing configuration"
  slurp:
    src: "{{ teamcity_single_agent_install_dir }}/conf/buildAgent.properties"
  register: teamcity_single_agent_current_config_windows
  when: ansible_os_family == "Windows" and teamcity_single_agent_current_config_file_windows.stat.exists

- name: "Agent {{ teamcity_single_agent_name }} -- Read existing configuration"
  slurp:
    src: "{{ teamcity_single_agent_install_dir }}/conf/buildAgent.properties"
  register: teamcity_single_agent_current_config_posix
  when: ansible_os_family != "Windows" and teamcity_single_agent_current_config_file_non_windows.stat.exists

- name: "Agent {{ teamcity_single_agent_name }} -- Extract buildAgent.zip (Windows)"
  win_shell: 7z x -aoa -mmt=on "{{ teamcity_downloaded_buildagent_zip }}" -o"{{ teamcity_single_agent_install_dir }}"
  when: ansible_os_family == "Windows" and not teamcity_single_agent_current_config_file_windows.stat.exists

- name: "Agent {{ teamcity_single_agent_name }} -- Extract buildAgent.zip (Non Windows)"
  unarchive:
    src: "{{ teamcity_downloaded_buildagent_zip }}"
    dest: "{{ teamcity_single_agent_install_dir }}"
    creates: "{{ teamcity_single_agent_install_dir }}/bin/agent.sh"
    remote_src: true
  when: ansible_os_family != "Windows" and not teamcity_single_agent_current_config_file_non_windows.stat.exists

- name: "Agent {{ teamcity_single_agent_name }} -- Setup buildAgent.properties (Windows)"
  win_template:
    src: "buildAgent.properties.j2"
    dest: "{{ teamcity_single_agent_install_dir }}/conf/buildAgent.properties"
  vars:
    _teamcity_agent_token: "{{ teamcity_single_agent_current_config_windows['content'] | default('') | b64decode | regex_findall('authorizationToken=(.+)') | first | default('') }}"
  when: ansible_os_family == "Windows"

- name: "Agent {{ teamcity_single_agent_name }} -- Setup buildAgent.properties (Non Windows)"
  template:
    src: "buildAgent.properties.j2"
    dest: "{{ teamcity_single_agent_install_dir }}/conf/buildAgent.properties"
    mode: u=rw,g=r,o=r
  vars:
    _teamcity_agent_token: "{{ teamcity_single_agent_current_config_posix['content'] | default('') | b64decode | regex_findall('authorizationToken=(.+)') | first | default('') }}"
  when: ansible_os_family != "Windows"

- name: "Agent {{ teamcity_single_agent_name }} -- Change ownership of all Build Agent files to {{ teamcity_build_username }} (Windows)"
  win_owner:
    path: "{{ teamcity_single_agent_install_dir }}"
    user: "{{ teamcity_build_username }}"
    recurse: true
  when: ansible_os_family == "Windows"

- name: "Agent {{ teamcity_single_agent_name }} -- Give {{ teamcity_build_username }} full control on files (Windows)"
  win_acl:
    user: "{{ teamcity_build_username }}"
    path: "{{ teamcity_single_agent_install_dir }}"
    rights: FullControl
    type: allow
    state: present
    propagation: InheritOnly
    inherit: ContainerInherit, ObjectInherit
  when: ansible_os_family == "Windows"

- name: "Agent {{ teamcity_single_agent_name }} -- Change ownership of all Build Agent files to {{ teamcity_build_username }} (Non Windows)"
  file:
    path: "{{ teamcity_single_agent_install_dir }}"
    owner: "{{ teamcity_build_username }}"
    recurse: true
  when: ansible_os_family != "Windows"

# Enable service on Linux systems with systemd
- name: "Agent {{ teamcity_single_agent_name }} -- Deploy TeamCity systemd unit"
  template:
    src: "teamcity-agent.service.j2"
    dest: "/etc/systemd/system/teamcity-{{ teamcity_single_agent_name }}.service"
    mode: u=rw,g=r,o=r
  become: true
  register: teamcity_single_agent_unit
  when: ansible_os_family in ['Debian', 'RedHat']

- name: "Agent {{ teamcity_single_agent_name }} -- Force systemd to reread configs"
  systemd:
    daemon_reload: true
  become: true
  when: ansible_os_family in ['Debian', 'RedHat'] and teamcity_single_agent_unit.changed

- name: "Agent {{ teamcity_single_agent_name }} -- Start agent"
  service:
    name: "teamcity-{{ teamcity_single_agent_name }}"
    state: started
    enabled: true
  become: true
  when: ansible_os_family in ['Debian', 'RedHat']

# Enable service on MacOs
- name: "Agent {{ teamcity_single_agent_name }} -- Deploy TeamCity launchd service"
  template:
    src: jetbrains.teamcity.BuildAgent.plist.j2
    dest: "{{ teamcity_single_agent_launchd_filename }}"
    mode: 0644
  register: teamcity_single_agent_launchd_service
  when: ansible_os_family == 'Darwin'

- name: "Agent {{ teamcity_single_agent_name }} -- Launchctl load service"
  command: launchctl load "{{ teamcity_single_agent_launchd_filename }}"
  when: ansible_os_family == 'Darwin' and teamcity_single_agent_launchd_service.changed

# Enable service on Windows using task scheduler
- name: "Agent {{ teamcity_single_agent_name }} -- Add scheduled task to start at logon"
  win_scheduled_task:
    name: "TeamCity-{{ teamcity_single_agent_name }}"
    description: "Start the Teamcity agent in {{ teamcity_single_agent_install_dir }}"
    enabled: true
    logon_type: interactive_token
    #    run_level: highest
    restart_count: 10000000
    execution_time_limit: PT0S
    start_when_available: true
    path: \TCAgents
    actions:
      - path: bin\agent.bat
        arguments: start
        working_directory: "{{ teamcity_single_agent_install_dir }}"
    triggers:
      - enabled: true
        type: logon
        user_id: "{{ teamcity_build_username }}"
    username: "{{ teamcity_build_username }}"
    password: "{{ teamcity_build_user_password }}"
    update_password: no
  when: ansible_os_family == 'Windows'
